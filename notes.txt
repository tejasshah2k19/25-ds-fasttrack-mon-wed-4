Stack 

Push  - insert 
pop   - remove 

lifo - last in first out 


Stack -> Lifo 

insert -> push 
remove -> pop 

stack manage pointer -> TOP 

------------------------------------------------------

stack -> int {num}
stack -> char 


1) string reverse using Stack


run -> Enter String 
                royal
                layor



------------------------------------------------------


PUSH 10 20 30 40 
SIZE 5 


top -> ? 

    4
    3   40 top
    2   30  
    1   20  
    0   10    
        stack 
    
-------------------------------------------------------


royal 
layor 


-------------------------------------------------------

Stack -> LiFo : Last in First Out  : chat log history ctrl+z 
Queue -> FiFo : First In First Out : line-queue , Printer Print , spotify music list , play store 3 app install ,  

-------------------------------------------------------

insert -> enQueue 
remove -> deQueue 
all   -> display 

-------------------------------------------------------
queue -> front and rear 

front -> insert 
rear  -> remove 

-------------------------------------------------------


(1+3)-(8*9) => yes 

(1+3)-(8*9)) => NO

{a*b}+[c-d]+(a*c) => yes 

{a*b]+[c-d}+(a*c) => No 


program -> Valid / InValid 


()() => yes 

()()) => NO

{}[]() => yes 

{][}() => No 

((((((([][][][][{{{{{}}}}}]))))))) => YES 

()()( => NO

[ { ( ) } }  [ ( { ) } ] ]  IS VALID ?
STACK -> 

---------------------------------------------------
 
array -> [1,2,3,4,5,6,7]

target : 9
2,7  
3,6
4,5

---------------------------------------------------
array 
7 days -> [2,4,3,6,10,4,2] 

day  : buy  : Monday : 1 
day  : sale : Friday : 5
profit : 8 

7 days -> [8,7,6,5,4,3,2] 
Bad Week 

---------------------------------------------------

searching :- 


1) linear search 
2) binary search 




[23,45,67,89,08,76,543,2] -> 

=>100 => Not Present 
=>67  => Present 
--------------------------------------------------------------
1
2
3
4
5


print(5); 


1
2
3
4
5
6
7

print(7);

--------------------------------------------------------------
table -> 5 * 1   = 5 
         5 * 10 =  50 



pattern(10,30) 
11,13,15,17,19,21,23,25,27,29


--------------------------------------------------------------


int a[5]; 


scan(a); 

print(a); 

 
---------------------------------------------------------------









