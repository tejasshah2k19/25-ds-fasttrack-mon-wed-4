
---------------------------------------------------

array -> [1,2,3,4,5,6,7]

target : 9
2,7  
3,6
4,5

---------------------------------------------------
array 
7 days -> [2,4,3,6,10,4,2] 

day  : buy  : Monday : 1 
day  : sale : Friday : 5
profit : 8 

7 days -> [8,7,6,5,4,3,2] 
Bad Week 

---------------------------------------------------
solution -> 
    4 -> 4.30 -> 

    upi -> xxxx -> 150 -> pin -> 1 min -> success -> 
    CRED -> card -> 1 second  2.5 second -> 
        kotak -> 24 -> 25 



    128MB -> 
    128MB->256MB 

        5 LAC -> 
            utilize -> 3 LAC -> 
            remain  -> 2 LAC -> 
            new exp -> 3 LAC 
            CRED -> 1 LAC -> payment -> 1 second -> credit ->   {size}{30MB}{3GB}
            monday -> 3gb -> 
            uninstall {3gb free} 
            install 3b 

            bank -> 24 hours-> 
            3 LAC Exp 

    256GB 
    512GB-> offload -> 3GB => 300MB ->

a = 10
b = 20 

2 minute 
30 

ALGO -> 

DS -> 

1) time complexity  { execute -> number of instructions }
2) space complexity  { execution -> space occupied by your program }
                    {resouces}


1 : AVG CASE  : theta  : lower + uper 
2 : BEST CASE : omega : lower bound  
3 : WORST CASE : bigO : uper bound  


linear search 
best  1 , 1  ,1  X 
avg   2.5 , 5 , 50 X 

WORST 5 , 10 , 100 -> improve  

input size -> increase -> avg , WORST 

DS -> best -> slow -> 

n , size 


constant -> O(1)

DS -> ALGO -> 98% constant


omega 
theta 
bigO   


num = 5 , 10 , 20 , 30 , 500 , 5000 , 6000 

for(i=1;i<=10;i++){
    printf("\n%d * %d  = %d ",num,i,num*i);
}

multiplication table of give num -:

5:10 
10:10
20:10
500:10 
6000:10 
O(10) : O(1)
------------------------------------------------------------------------

for(int i=1;i<=100;i++){
    for(int j=1;j<=100;j++)
    {
        printf("*");
    }
    printf("\n");
}
25 ->5: O(n*n)  O(n2)
100:10
10000 :100 

------------------------------------------------------------------------


complexity :- 
        1) time complexity  -> number of execution / instructions 
        2) space complexity -> memory  / space => run 
 

WORST - Big O  
 
program -> input size , random data 


------------------------------------------------------------------------
Linear -> sequential -> O(n)


Binary Search :- 


a[] = {10  20  30  40  50  60  70  80  90  100 }

                       mid 
0   1   2   3   4   5   6   7   8   9    
10  20  30  40  50  60  70  80  90  100 
                        max 
                        min


search = 70 

min 
max 

mid = (min+max)/2 = (0 + 9)/2 => 4 

a[mid] == search 


mid = (min+max)/2 = (5 + 9)/2 => 7 

mid = (min+max)/2 = (5 + 6)/2 => 5 

mid = (min+max)/2 = (6 + 6)/2 => 6 




































 